[
	{"keys": ["ctrl+tab"], "command": "next_view"},
	{"keys": ["ctrl+shift+tab"], "command": "prev_view"},
    { "keys": ["super+shift+t"], "command": "reopen_last_file" },
    { "keys": ["ctrl+t"], "command": "open_terminal" },
    { "keys": ["super+t"], "command": "new_file" },
    { "keys": ["super+alt+r"], "command": "reveal_in_side_bar"},
    // ctrl+左键跳转到函数定义处
    {
        "button": "button1",
        "count": 1,
        "modifiers": ["ctrl"],
        "press_command": "drag_select",
        "command": "goto_definition"
    },
    // 修改窗格大小
	{
		"keys": ["super+alt+left"],
		"command": "set_layout",
		"args":
		{
			"cols": [0.0, 0.25, 1.0],
			"rows": [0.0, 1.0],
			"cells": [[0, 0, 1, 1], [1, 0, 2, 1]]
		}
	},
	{
		"keys": ["super+alt+right"],
		"command": "set_layout",
		"args":
		{
			"cols": [0.0, 0.75, 1.0],
			"rows": [0.0, 1.0],
			"cells": [[0, 0, 1, 1], [1, 0, 2, 1]]
		}
	},

	// Select text between brackets
	{
	    "keys": ["ctrl+alt+super+s"],
	    "command": "bh_key",
	    "args":
	    {
	        "lines" : true,
	        "plugin":
	        {
	            "type": ["__all__"],
	            "command": "bh_modules.bracketselect"
	        }
	    }
	},
	{ "keys": ["ctrl+shift+'"], "command": "change_quotes" },
	{ "keys": ["ctrl+shift+w"], "command": "close_all" },
	// Go to left bracket
	{
	    "keys": ["alt+up"],
	    "command": "bh_key",
	    "args":
	    {
	        "lines" : true,
	        "plugin":
	        {
	            "type": ["__all__"],
	            "command": "bh_modules.bracketselect",
	            "args": {"select": "left"}
	        }
	    }
	},
	// Go to right bracket
	{
	    "keys": ["alt+down"],
	    "command": "bh_key",
	    "args":
	    {
	        "lines" : true,
	        "plugin":
	        {
	            "type": ["__all__"],
	            "command": "bh_modules.bracketselect",
	            "args": {"select": "right"}
	        }
	    }
	},
    { "keys": ["j", "j"], "command": "exit_insert_mode",
        "context":
        [
            { "key": "setting.command_mode", "operand": false },
            { "key": "setting.is_widget", "operand": false }
        ]
    },
    {
        "keys": ["g", "d"],
        "command": "anaconda_goto",
        "context":
        [
            { "key": "selector", "operator": "equal", "operand": "source.python" },
            { "key": "setting.command_mode", "operand": true },
            { "key": "setting.is_widget", "operand": false }
        ]
    },
    { "keys": ["ctrl+d"], "command": "goto_definition" },
    { "keys": ["super+shift+r"], "command": "goto_symbol_in_project" },
    { "keys": ["ctrl+["], "command": "jump_back" },
    { "keys": ["ctrl+]"], "command": "jump_forward" },
    {
        "keys": ["ctrl+;"],
        "command": "ace_jump_char"
    },
    {
        "keys": ["ctrl+'"],
        "command": "ace_jump_line"
    },
    {
        "keys": ["ctrl+shift+'"],
        "command": "ace_jump_select"
    },
    // 覆盖css-goto-declaration默认的command + right or left
    // {
    //     "keys": ["ctrl+]"], "command": "goto_css_declaration",
    //     "args": {"goto": "next"}
    // },
    // {
    //     "keys": ["ctrl+["],  "command": "goto_css_declaration",
    //     "args": {"goto": "prev"}
    // },
    // 恢复command + right or left的默认行为, 到行首或行尾
    { "keys": ["super+left"], "command": "move_to", "args": {"to": "bol"} },
    { "keys": ["super+right"], "command": "move_to", "args": {"to": "eol"} },
    { "keys": ["h"], "command": "move", "args": {"by": "characters", "forward": false}, "context":
        [
            {"key": "control", "operand": "sidebar_tree"}
        ]
    },
    { "keys": ["j"], "command": "move", "args": {"by": "lines", "forward": true}, "context":
        [
            {"key": "control", "operand": "sidebar_tree"}
        ]
    },
    { "keys": ["k"], "command": "move", "args": {"by": "lines", "forward": false}, "context":
        [
            {"key": "control", "operand": "sidebar_tree"}
        ]
    },
    { "keys": ["l"], "command": "move", "args": {"by": "characters", "forward": true}, "context":
        [
            {"key": "control", "operand": "sidebar_tree"}
        ]
    },
    {
        "keys": ["tab"],
        "command": "expand_abbreviation_by_tab",

        // put comma-separated syntax selectors for which
        // you want to expandEmmet abbreviations into "operand" key
        // instead of SCOPE_SELECTOR.
        // Examples: source.js, text.html - source
        "context": [
            {
                "operand": "source.js.jsx",
                "operator": "equal",
                "match_all": true,
                "key": "selector"
            },

            // run only if there's no selected text
            {
                "match_all": true,
                "key": "selection_empty"
            },

            // don't work if there are active tabstops
            {
                "operator": "equal",
                "operand": false,
                "match_all": true,
                "key": "has_next_field"
            },

            // don't work if completion popup is visible and you
            // want to insert completion with Tab. If you want to
            // expand Emmet with Tab even if popup is visible --
            // remove this section
            {
                "operand": false,
                "operator": "equal",
                "match_all": true,
                "key": "auto_complete_visible"
            }, {
                "match_all": true,
                "key": "is_abbreviation"
            }
        ]
    }
]
